name: test

on:
  - workflow_dispatch
  - push
  - workflow_call

jobs:
  setup:
    strategy:
      matrix:
        os: [imagegenteam-ubuntu2204-16cores]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "${{ steps.get-go-version.outputs.go-version }}"
      - name: Determine Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Set up Go modules cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
  test:
    needs:
      - setup
    continue-on-error: true
    strategy:
      matrix:
        os: [imagegenteam-ubuntu2204-16cores, imagegenteam-ubuntu2204-16cores, imagegenteam-ubuntu2204-16cores, imagegenteam-ubuntu2204-16cores, imagegenteam-ubuntu2204-16cores ]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - run: |
          cat /etc/hosts
      - run: |
          sudo sed -i 's/::1 localhost ip6-localhost ip6-loopback/::1 ip6-localhost ip6-loopback/g' /etc/hosts
      - run: |
          cat /etc/hosts
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version: "${{ steps.get-go-version.outputs.go-version }}"
      - name: Determine Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Set up Go modules cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Install Tools
        run: |
          sudo apt-get install make
          make tools
      - name: Initialize Test Database
        run: |
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt install docker-ce
          which pg_isready || sudo apt-get update && sudo apt-get install -y postgresql-client
          make DOCKER_ARGS='-d' PG_OPTS='-c shared_buffers=256MB -c max_connections=200000' -C testing/dbtest/docker database-up
          until pg_isready -h 127.0.0.1; do docker container inspect boundary-sql-tests &> /dev/null || exit -1; sleep 1; done

      - name: Test
        run: |
          go test "github.com/hashicorp/boundary/internal/credential/vault" -tags="" -v -json -cover -timeout 120m | tparse -follow
      - name: Cleanup
        if: always()
        run: |
          make -C testing/dbtest/docker clean
